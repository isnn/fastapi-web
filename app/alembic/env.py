from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool, Column

import importlib
from sqlmodel import SQLModel

from alembic import context
from alembic.operations import ops
# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

import sys
import os

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.append(project_root)  # Add the project root to sys.path

# Import models to ensure they are registered with SQLModel
from app.models import *
from core.config import settings # noqa

target_metadata = SQLModel.metadata

from alembic.operations import ops
from alembic.autogenerate import rewriter

def get_url():
    return str(settings.SQLALCHEMY_DATABASE_URI)

def reorder_columns(op):
    """
    Reorder columns based on predefined rules:
    - ID-related columns first.
    - 'created_at', 'updated_at', 'deleted_at' columns at the end.
    """
    special_order = {
        "id": -100,
        "created_at": 1001,
        "updated_at": 1002,
        "deleted_at": 1003,
    }

    # Assign order only to Column objects, leave others at default
    columns_with_order = [
        (
            special_order.get(col.key, 0) if isinstance(col, Column) else 2000,
            col,
        )
        for col in op.columns
    ]

    # Sort columns by their order key
    sorted_columns = [col for _, col in sorted(columns_with_order, key=lambda x: x[0])]
    return sorted_columns

def process_revision_directives(context, revision, directives):
    """
    Hook to process autogenerated migrations and reorder columns in CreateTableOp.
    """
    script = directives[0]

    if hasattr(script, "upgrade_ops") and isinstance(script.upgrade_ops, ops.UpgradeOps):
        for op in script.upgrade_ops.ops:
            if isinstance(op, ops.CreateTableOp):
                # Reorder columns in-place
                op.columns[:] = reorder_columns(op)



def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
        process_revision_directives=process_revision_directives

    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_url()

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata,
            process_revision_directives=process_revision_directives
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
